import FreeCAD as App
import FreeCADGui as Gui
import Part, Draft
import math
import os
from PySide2.QtWidgets import QFileDialog

# Global variables
doc = None
# Constants for the engraving
TRI_HEIGHT = 1  # Height of the triangle [mm]
TRI_ANGLE = math.pi / 2  # Angle of the tip [rad]
CYL_RADIUS = 26.5  # Radius of the cylinder [mm]
CYL_LENGTH = 125  # Length of the cylinder [mm]
FILLET_RADIUS = 0.005 # Radius of the fillet to smooth tip path

def cyl_to_cart(r, theta, z):
    """Convert cylindrical coordinates to cartesian"""
    x = r * math.cos(theta)
    y = r * math.sin(theta)
    return (x, y, z)

def cart_to_cyl(x, y, z):
    """Convert cartesian coordinates to cylindrical"""
    r = math.sqrt(x*x + y*y)
    theta = math.atan2(y, x)
    return (r, theta)

def create_cylinder(radius, length):
    """Create a cylinder with given radius and length"""
    cylinder = Part.makeCylinder(radius, length)
    cylinder_obj = doc.addObject("Part::Feature", "Cylinder")
    cylinder_obj.Shape = cylinder
    return cylinder_obj

def create_triangle_profile(tip_point, next_point):
    """Create triangular profile for the engraving"""
    tip_x, tip_y, tip_z = tip_point
    _, theta = cart_to_cyl(tip_x, tip_y, tip_z)
    
    # Create base triangle with tip at the origin, on yz plane    
    top_x, top_y, top_z = TRI_HEIGHT, 0,  TRI_HEIGHT * math.tan(TRI_ANGLE / 2)
    bot_x, bot_y, bot_z = TRI_HEIGHT, 0, -TRI_HEIGHT * math.tan(TRI_ANGLE / 2)

    # Rotate triangle around x axis
    dx, dy, dz = next_point[0] - tip_x, next_point[1] - tip_y, next_point[2] - tip_z
    angle = -math.atan2(dz, math.sqrt(dx**2 + dy**2))
    top_y, top_z = -top_z * math.sin(angle), top_z * math.cos(angle)
    bot_y, bot_z = -top_y, -top_z

    # Rotate the triangle around z axis
    top_x, top_y = top_x * math.cos(theta) - top_y * math.sin(theta), top_x * math.sin(theta) + top_y * math.cos(theta)
    bot_x, bot_y = bot_x * math.cos(theta) - bot_y * math.sin(theta), bot_x * math.sin(theta) + bot_y * math.cos(theta)

    # Translate the triangle to the tip
    top_x += tip_x
    top_y += tip_y
    top_z += tip_z
    bot_x += tip_x
    bot_y += tip_y
    bot_z += tip_z

    # Create triangle wire
    v1 = App.Vector(tip_x, tip_y, tip_z)
    v2 = App.Vector(top_x, top_y, top_z)
    v3 = App.Vector(bot_x, bot_y, bot_z)
    
    wire = Part.makePolygon([v1, v2, v3, v1])
    return wire

def create_tip_path(points):
    """Create the path for the engraving tip"""
    path = Part.makePolygon(points)
    # path = round_corners(path, FILLET_RADIUS)
    return path

def round_corners(wire, radius):
    """Rounds the corners of a Part.Wire with a given radius"""
    try:
        # Create a list of edges
        shape = wire.Shape
        edges = shape.Edges
        filleted = shape.makeFillet(radius, edges)
        return filleted
        
        # # Create a list of fillets
        # fillets = []
        # for edge in edges:
        #     fillet = edge.makeFillet(radius)
        #     fillets.append(fillet)
        
        # # Create a list of vertices
        # vertices = []
        # for fillet in fillets:
        #     vertices.extend(fillet.Vertexes)
        
        # Create a new wire
        new_wire = wire.toShape().makeFillets(radius, edges)
        return new_wire
    
    except Exception as e:
        print(f"Error in round_corners: {str(e)}")
        return None

def engrave_once(file_path, loop_id):
    """Create one engraving loop"""
    try:
        points = []
        with open(file_path, 'r') as f:
            for line in f:
                x, y, z = map(float, line.strip().split(','))
                points.append(App.Vector(x*1e3, y*1e3, z*1e3))

        # Create path wire
        path_wire = create_tip_path(points)
        path_obj = doc.addObject("Part::Feature", f"Loop_{loop_id}")
        path_obj.Shape = path_wire

        # Create triangle profile
        profile_wire = create_triangle_profile(points[-1], points[-2])
        profile_obj = doc.addObject("Part::Feature", f"Triangle_{loop_id}")
        profile_obj.Shape = profile_wire

        # Create sweep
        sweep_obj = doc.addObject("Part::Sweep", f"Sweep_{loop_id}")
        sweep_obj.Sections = [profile_obj]  # Use the document object
        sweep_obj.Spine = (path_obj, [])  # Use the document object
        sweep_obj.Solid = True
        sweep_obj.Frenet = True
        sweep_obj.recompute()

        # Create the cut operation
        cut_obj = doc.addObject("Part::Cut", f"Cut_{loop_id}")

        # Determine the base object for the cut
        if loop_id == 0:
            cut_obj.Base = doc.getObject("Cylinder")
        else:
            cut_obj.Base = doc.getObject(f"Cut_{loop_id-1}")

        cut_obj.Tool = sweep_obj
        doc.recompute()
        return True

    except Exception as e:
        print(f"Error in engrave_once: {str(e)}")
        return False

def select_folder():
    """Open folder selection dialog"""
    folder = QFileDialog.getExistingDirectory()
    return folder if folder else None

def main():
    """Main function"""
    global doc
    
    # Create new document
    doc = App.newDocument()

    print("-"*10 + " Generating engraved cylinder " + "-"*10)
    
    # Create base cylinder
    create_cylinder(CYL_RADIUS, CYL_LENGTH)
    
    # Get folder with CSV files
    folder_path = select_folder()
    if not folder_path:
        print("No folder selected")
        return
    
    # Process all CSV files
    for i, filename in enumerate(sorted(os.listdir(folder_path))):
        if filename.endswith('.csv'):
            file_path = os.path.join(folder_path, filename)
            print(f"Processing file {filename}")
            if not engrave_once(file_path, i):
                print(f"Failed to process {filename}")
                break
    
    doc.recompute()
    Gui.SendMsgToActiveView("ViewFit")

if __name__ == '__main__':
    main()